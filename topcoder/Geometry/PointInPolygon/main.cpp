/*
 * =====================================================================================
 *
 *       Filename:  main.c
 *
 *    Description:  
 *
 *        Version:  1.0
 *        Created:  2012/04/18 16:56:38
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  TerryLu (), terrylu87@gmail.com
 *        Company:  TerryLu's working house
 *
 * =====================================================================================
 */

/* This is a problem from top coder */
/* http://community.topcoder.com/stat?c=problem_statement&pm=2384&rd=4755 */

/* test data */
// 0)
#define TEST_VER_0 {"0 0",                      \
            "0 10",                             \
            "10 10",                            \
            "10 0"}
#define TEST_X_0 5
#define TEST_Y_0 5
#define RET_0 "INTERIOR"
// A simple example of a square of side 10.

// 1)
// {"0 0",
//  "0 10",
//  "10 10",
//  "10 0"}
// 10
// 15
// Returns: "EXTERIOR"
// Outside the same square.

// 2)
// {"0 0",
//  "0 10",
//  "10 10",
//  "10 0"}
// 5
// 10
// Returns: "BOUNDARY"
// On an edge of the square

// 3)
// {"-100 -90", "-100 100","100 100", "100 -100",
//  "-120 -100","-120 100","-130 100","-130 -110",
//  "110 -110", "110 110", "-110 110","-110 -90"}
// 0
// 0
// Returns: "EXTERIOR"

// 4)
// {"0 0","0 1000","1000 1000","1000 800",
//  "200 800","200 600","600 600","600 400",
//  "200 400","200 200","1000 200","1000 0"}
// 100
// 500
// Returns: "INTERIOR"

// 5)
// {"0 1000","1000 1000","1000 800",
//  "200 800","200 600","600 600","600 400",
//  "200 400","200 200","1000 200","1000 0","0 0"}
// 322
// 333
// Returns: "EXTERIOR"

// 6)
// {"500 0","500 100","400 100","400 200","300 200",
//  "300 300","200 300","200 400","100 400","100 500",
//  "0 500","0 400","-100 400","-100 300","-200 300",
//   "-200 200","-300 200","-300 100","-400 100","-400 0",
//   "-500 0","-500 -100","-400 -100","-400 -200","-300 -200",
//   "-300 -300","-200 -300","-200 -400","-100 -400","-100 -500",
//   "0 -500","0 -400","100 -400","100 -300","200 -300",
//   "200 -200","300 -200","300 -100","400 -100","400 0"}
// 200
// 200
// Returns: "INTERIOR"

// 7)
// {"1 0","2 0","2 1","3 1","3 0","4 0","4 -1","5 -1","5 0",
//  "6 0","6 2","0 2","0 3","-1 3","-1 4","0 4","0 6","1 6",
//  "1 7","0 7","0 8","-2 8","-2 2","-8 2","-8 0","-7 0",
//  "-7 -1","-6 -1","-6 0","-4 0","-4 1","-3 1","-3 0",
//  "-2 0","-2 -6","0 -6","0 -5","1 -5","1 -4","0 -4",
//  "0 -3","-1 -3","-1 -2","0 -2","0 -1","1 -1"}
// 0
// 0
// Returns: "INTERIOR"

#include <iostream>
#include <string>
#include <gtest/gtest.h>

using namespace std;

string testPoint(string[] vertices, int X, int Y)
{
    return "INTERIOR";
}

TEST(PointInPolygonTest, TestPoint) {
    EXPECT_EQ(RET_0, testPoint(1, TEST_X_0, TEST_Y_0));
}

int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}